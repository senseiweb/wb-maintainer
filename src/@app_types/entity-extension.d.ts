import { SharepointEntity } from 'app/core/data-models/sharepoint-entity';
import {
  DataPropertyConfig,
  NavigationPropertyConfig,
  AutoGeneratedKeyType,
  MetadataStore
} from 'breeze-client/src/entity-metadata';
import { Validator, Entity, DataType, EntityManager } from 'breeze-client';
import { Unarray } from './helper';
import {
  ActionItem,
  AssetTriggerAction,
  Generation,
  GenerationAsset,
  TeamAvailability,
  Team,
  TeamCategory,
  TeamJobReservation,
  Trigger,
  TriggerAction
} from 'app/feature/aagt/aagt-core/aagt-data-models';
import { Asset } from 'app/feature/aagt/aagt-core/aagt-data-models/asset';
import { CustomNameConventionService } from 'app/core/data-access/breeze-providers/custom-name-convention.service';
import { BzEntityPropDecorArgCollection } from 'app/core/decorators/bz-entity-annotation/bz-entity-prop.decorator';
import {
  SharepointMetadata,
  BreezeEntity,
  CoreRepo,
  CoreSharepointRepo
} from 'app/core';
import { WeatherForcast } from 'app/feature/home';
import { FormGroup, FormControl } from '@angular/forms';
import { Omit } from './helper';

export type CustomFormGroup = Omit<FormGroup, 'controls'>;

export type CustomFormControl<T> = { [key in keyof T]: FormControl };
export type AppFormGroup<T extends CustomFormControl<T>> = CustomFormGroup & {
  controls: CustomFormControl<T>;
};

export interface IAppFormGroup<T> extends CustomFormGroup {
  controls: CustomFormControl<T>;
}

export interface ISoftDeletable {
  wasSoftDeleted: boolean;
}

export type AssetTrigActGraph = [GenerationAsset, AssetTriggerAction[]];
export type TrigGrapData = [Trigger, AssetTrigActGraph[]];
export type GenGraphData = TrigGrapData[];

export type SharepointAagtEntityList =
  | Asset
  | ActionItem
  | AssetTriggerAction
  | Generation
  | GenerationAsset
  | TeamAvailability
  | Team
  | TeamCategory
  | TeamJobReservation
  | Trigger
  | TriggerAction;

export type GlobalEntityList = WeatherForcast;

export type SharepointEntityList = SharepointAagtEntityList;

export type EntityList = SharepointEntityList | GlobalEntityList;

export type BzPropDecoratorKind = BzEntityPropDecorator['kind'];

export type ExcludePropKindKey<TProp> = TProp extends 'kind' ? never : TProp;

export type ExcludeKindField<A> = Partial<
  { [K in ExcludePropKindKey<keyof A>]: A[K] }
>;

export type ExtreBareEntityProps =
  | 'entityType'
  | 'entityAspect'
  | 'entityDefinition'
  | '$typeName';

export type RawEntity<T> = Partial<
  Pick<T, Exclude<keyof T, keyof Entity | ExtreBareEntityProps>>
>;

export type ExtractConfigParameters<A, T> = A extends { kind: T }
  ? ExcludeKindField<A>
  : never;

export type BzEntityPropDecorator =
  | IBzEntityPropDataDecorator
  | ISpEntityPropNavDecorator;

interface ICustomNameDictionary {
  [index: string]: {
    [index: string]: string;
  };
}

export interface IBzEntityPropDataDecorator {
  kind: 'data';
  spInternalName?: string;
  dataCfg?: Partial<DataPropertyConfig>;
}

export interface ISpEntityPropNavDecorator {
  kind: 'nav';
  navCfg: Partial<NavigationPropertyConfig>;
  relativeEntity: SharepointEntityList['shortname'];
}

export interface IBzEntityCustomValidator<T> {
  validatorScope: 'property' | 'entity';
  targetedProperty: Extract<keyof T, string>;
  reqProps?: Array<Extract<keyof T, string>>;
  validator?: () => Validator;
}

export interface IBreezeScaffoldProto {
  spBzEntity: IBzEntityDecorateArgs;
  propCollection: BzEntityPropDecorArgCollection;
  spBzNameDict: ICustomNameDictionary;
  bzEntityInit: () => void;
}

export interface IBzEntityDecorateArgs {
  entityProps: IBzEntityDecArgs;
  createTypeForStore: (
    store: MetadataStore,
    nameDictionaryService: CustomNameConventionService,
    namespace: string
  ) => void;
}

export interface ISpQueryOptions {
  $filter?: string;
  $orderby?: string;
  $skip?: number;
  $top?: number;
  $select?: string;
  $inlinecount?: string;
  $expand?: string;
}

export interface IBzEntityDecArgs {
  shortName?: string;
  isComplexType?: boolean;
  namespace?: string;
  autoKeyGenType?: AutoGeneratedKeyType;
}

export type GetEntityType<
  T extends EntityList['shortname']
> = EntityList extends (infer E)
  ? E extends EntityList
    ? E['shortname'] extends T
      ? E
      : never
    : never
  : never;

export type GetSpEntityType<
  T extends SharepointEntityList['shortname']
> = SharepointEntityList extends (infer E)
  ? E extends SharepointEntityList
    ? E['shortname'] extends T
      ? E
      : never
    : never
  : never;

export type GetEntityProp<
  T extends EntityList['shortname']
> = EntityList extends (infer E)
  ? E extends EntityList
    ? E['shortname'] extends T
      ? keyof E
      : never
    : never
  : never;

// https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#keyof-and-lookup-types
export type EntityChildrenKind<T extends BreezeEntity> = Extract<
  { [P in keyof T]: T[P] extends Array<infer U> ? U : never }[keyof T],
  BreezeEntity
>;

export type RelatedEntityKind<T extends BreezeEntity> = Extract<
  { [P in keyof T]: T[P] extends Array<infer U> ? U : T[P] }[keyof T],
  BreezeEntity
>;

export type SelectedEntityKind<T extends BreezeEntity['shortname']> = Extract<
  SharepointEntityList,
  { shortname: T }
>;

export type EntityChildShortName<T extends BreezeEntity> = EntityChildrenKind<
  T
>['shortname'];

export type RelatedEntityShortName<T extends BreezeEntity> = RelatedEntityKind<
  T
>['shortname'];

export interface IEntityPropertyChange<
  TShortName extends EntityList['shortname'],
  TProperty extends GetEntityProp<TShortName>
> {
  entityAction: 'PropertyChange';
  propertyName: TProperty;
  entity: GetEntityType<TShortName>;
  newValue: Pick<
    GetEntityType<TShortName>,
    TProperty & keyof GetEntityType<TShortName>
  >;
  oldValue: Pick<
    GetEntityType<TShortName>,
    TProperty & keyof GetEntityType<TShortName>
  >;
  parent: GetEntityType<TShortName>;
  property: DataType;
}
export interface IEntityStateChange<
  TShortName extends EntityList['shortname']
> {
  entityAction: 'EntityState';
}

export type EntityChangedArgType<
  TShortName extends EntityList['shortname'],
  TProperty extends GetEntityProp<TShortName>
> =
  | IEntityPropertyChange<TShortName, TProperty>
  | IEntityStateChange<TShortName>;

export type SelectedEntityChangeArgs<
  TShortName extends EntityList['shortname'],
  TProperty extends GetEntityProp<TShortName>,
  TEntityAction extends EntityChangedArgType<
    TShortName,
    TProperty
  >['entityAction']
> = Extract<
  EntityChangedArgType<TShortName, TProperty>,
  { entityAction: TEntityAction }
>;

export interface IEntityChangedEvent<
  TEntityList extends EntityList,
  TEntityName extends TEntityList['shortname'],
  TEntityAction extends EntityChangedArgType<
    TEntityName,
    TProperty
  >['entityAction'],
  TProperty extends GetEntityProp<TEntityName> = any
> {
  shortName: TEntityName;
  entityAction: TEntityAction;
  entity: GetEntityType<TEntityName>;
  args: SelectedEntityChangeArgs<TEntityName, TProperty, TEntityAction>;
}
export type GlobalRepoManagerExtended<T extends EntityList> =
  | GlobalEntityList
  | T;

// export interface RepoManager<T extends EntityList | SharepointEntityList> {
//   repo: { [key in GlobalRepoManagerExtended<T>]: CoreRepo<T> };
//   spRepo: {
//     [key in GlobalRepoManagerExtended<T>]: T extends SharepointEntityList
//       ? CoreSharepointRepo<T>
//       : never
//   };
// }
