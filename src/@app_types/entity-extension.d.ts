import { SharepointEntity } from 'app/core/data-models/sharepoint-entity';
import {
  DataPropertyConfig,
  NavigationPropertyConfig,
  AutoGeneratedKeyType,
  MetadataStore
} from 'breeze-client/src/entity-metadata';
import { aagtFeatureEntities } from 'app/feature/aagt/aagt-feature-models';
import { Validator } from 'breeze-client';
import { Unarray } from './helper';
import { ActionItem } from 'app/feature/aagt/aagt-core/aagt-data-models';
import { Asset } from 'app/feature/aagt/aagt-core/aagt-data-models/asset';
import { CustomNameConventionService } from 'app/core/data-access/breeze-name-dictionary.service';
import { SpEntityPropDecorArgCollection } from 'app/core/decorators/sp-entity-annotation/sp-entity-prop.decorator';

export interface ISoftDeletable {
  wasSoftDeleted: boolean;
}

export type SharepointAagtEntityList = Asset | ActionItem;

export type SharepointEntityList = SharepointAagtEntityList;

export type SpPropDecoratorKind = SpEntityPropDecorator['kind'];

export type ExcludePropKindKey<TProp> = TProp extends 'kind' ? never : TProp;

export type ExcludeKindField<A> = Partial<
  { [K in ExcludePropKindKey<keyof A>]: A[K] }
>;

export type ExtractConfigParameters<A, T> = A extends { kind: T }
  ? ExcludeKindField<A>
  : never;

export type SpEntityPropDecorator =
  | ISpEntityPropDataDecorator
  | ISpEntityPropNavDecorator;

interface ICustomNameDictionary {
  [index: string]: {
    [index: string]: string;
  };
}

export interface ISpEntityPropDataDecorator {
  kind: 'data';
  spInternalName?: string;
  dataCfg?: Partial<DataPropertyConfig>;
}

export interface ISpEntityPropNavDecorator {
  kind: 'nav';
  navCfg: Partial<NavigationPropertyConfig>;
  relativeEntity: SharepointEntityList['shortname'];
}

export interface ISpEntityCustomValidator<T> {
  validatorScope: 'property' | 'entity';
  targetedProperty: Extract<keyof T, string>;
  reqProps?: Array<Extract<keyof T, string>>;
  validator?: () => Validator;
}

export interface IBreezeScaffoldProto {
  spBzEntity: ISpBzEntityDecorateArgs;
  propCollection: SpEntityPropDecorArgCollection;
  spBzNameDict: ICustomNameDictionary;
  bzEntityInit: () => void;
}

export interface ISpBzEntityDecorateArgs {
  entityProps: ISpEntityDecArgs;
  createTypeForStore: (
    store: MetadataStore,
    nameDictionaryService: CustomNameConventionService,
    namespace: string
  ) => void;
}

export interface ISpEntityDecArgs {
  shortName?: string;
  isComplexType?: boolean;
  namespace?: string;
  autoKeyGenType?: AutoGeneratedKeyType;
}

export type GetEntityType<
  T extends SharepointEntityList['shortname']
> = SharepointEntityList extends (infer E)
  ? E extends SharepointEntityList
    ? E['shortname'] extends T
      ? E
      : never
    : never
  : never;

export type GetEntityProp<
  T extends SharepointEntityList['shortname']
> = SharepointEntityList extends (infer E)
  ? E extends SharepointEntityList
    ? E['shortname'] extends T
      ? keyof E
      : never
    : never
  : never;

// https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#keyof-and-lookup-types
export type EntityChildrenKind<T extends SharepointEntity> = Extract<
  { [P in keyof T]: T[P] extends Array<infer U> ? U : never }[keyof T],
  SharepointEntity
>;

export type SelectedEntityKind<
  T extends SharepointEntityList['shortname']
> = Extract<SharepointEntityList, { shortname: T }>;

export type EntityChildShortName<
  T extends SharepointEntity
> = EntityChildrenKind<T>['shortname'];
